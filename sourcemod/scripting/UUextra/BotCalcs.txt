

#define BulletWeapons		"tf_weapon_pistol | tf_weapon_minigun | tf_weapon_raygun | tf_weapon_drg_pomson | tf_weapon_syringegun_medic | tf_weapon_revolver | tf_weapon_smg | tf_weapon_charged_smg | tf_weapon_sniperrifle | tf_weapon_sniperrifle_classic | tf_weapon_sniperrifle_decap | tf_weapon_shotgun | tf_weapon_sentry_revenge | tf_weapon_shotgun_primary | tf_weapon_shotgun_building_rescue | tf_weapon_shotgun_hwg | tf_weapon_shotgun_pyro | tf_weapon_shotgun_soldier | tf_weapon_handgun_scout_secondary | tf_weapon_scattergun | tf_weapon_handgun_scout_primary | tf_weapon_soda_popper | tf_weapon_pep_brawler_blaster"

#define ExplosiveWeapons	"tf_weapon_pipebomblauncher | tf_weapon_grenadelauncher | tf_weapon_cannon | tf_weapon_rocketlauncher_airstrike | tf_weapon_rocketlauncher | tf_weapon_particle_cannon | tf_weapon_rocketlauncher_directhit"

#define Flareguns			"tf_weapon_flaregun | tf_weapon_flaregun_revenge"

#define MeleeWeapons		"tf_weapon_slap | saxxy | tf_weapon_bonesaw | tf_weapon_knife | tf_weapon_club | tf_weapon_breakable_sign | tf_weapon_wrench | tf_weapon_robot_arm | tf_weapon_fists | tf_weapon_bottle | tf_weapon_sword | tf_weapon_stickbomb | tf_weapon_fireaxe | tf_weapon_shovel | tf_weapon_katana | tf_weapon_bat_fish | tf_weapon_bat | tf_weapon_bat_giftwrap | tf_weapon_bat_wood | tf_weapon_bottle"

#define SpecialWeapons		"tf_weapon_rocketlauncher_fireball"

#define FlameThrowers		"tf_weapon_flamethrower"

#define Bows "tf_weapon_compound_bow | tf_weapon_crossbow"

#define Cleaver "tf_weapon_cleaver"

//Bot Stuff
new Float:lvlScale = 0.0;
new Float:damagebuy[MAXPLAYERS+1] = 0.0;
new Float:damagebuy2[MAXPLAYERS+1] = 0.0;

new Float:healthbuy[MAXPLAYERS+1] = 0.0;
new Float:buildinghealthbuy[MAXPLAYERS+1] = 0.0;
new Float:resistbuy[MAXPLAYERS+1] = 0.0;

new Float:regenbuy[MAXPLAYERS+1] = 0.0;
new Float:Blastbuy[MAXPLAYERS+1] = 0.0;

new Float:Sentrybuy1[MAXPLAYERS+1] = 0.0;
new Float:Sentrybuy2[MAXPLAYERS+1] = 0.0;
new Float:Sentrybuy3[MAXPLAYERS+1] = 0.0;

new Float:afterburnbuy[MAXPLAYERS+1] = 0.0;
new Float:projbuy[MAXPLAYERS+1] = 0.0;
new Float:timeburnbuy[MAXPLAYERS+1] = 0.0;
new Float:Disruptorbuy[MAXPLAYERS+1] = 0.0;

stock BotCalcs(client)
{
	lvlScale = GetConVarFloat(cvar_Botlevel)*0.7;
	damagebuy[client] = SquareRoot(RealStartMoney*1.50)*Pow(0.2,2.4)*(lvlScale*1.50);
	damagebuy2[client] = SquareRoot(RealStartMoney*1.40)*Pow(0.23,2.4)*(lvlScale*1.50);
	healthbuy[client] = SquareRoot(RealStartMoney*1.30)*2.2*(lvlScale*1.50);
	buildinghealthbuy[client] = SquareRoot(RealStartMoney*1.30)*0.3*(lvlScale*0.3);
	resistbuy[client] = SquareRoot(RealStartMoney*1.30)*0.4*(lvlScale*1.50);
	regenbuy[client] = SquareRoot(RealStartMoney*1.30)*1.2*(lvlScale*1.50);
	//new Float:regenbuy = SquareRoot(RealStartMoney*1.30)*0.4*(lvlScale*1.50);
	Blastbuy[client] = SquareRoot(RealStartMoney*1.30)*Pow(0.1,2.3)*(lvlScale*1.50);
	Sentrybuy1[client] = SquareRoot(RealStartMoney*1.30)*Pow(0.2,2.4)*(lvlScale*1.50);
	Sentrybuy2[client] = SquareRoot(RealStartMoney*1.30)*Pow(0.23,2.4)*(lvlScale*1.50);
	Sentrybuy3[client] = SquareRoot(RealStartMoney*1.30)*Pow(0.23,3.5)*(lvlScale*1.50);
	afterburnbuy[client] = SquareRoot(RealStartMoney*1.30)*Pow(0.1,2.3)*(lvlScale*1.50);
	projbuy[client] = SquareRoot(RealStartMoney*1.30)*Pow(0.1,2.3)*(lvlScale*1.50);
	timeburnbuy[client] = SquareRoot(RealStartMoney*1.30)*Pow(0.1,2.3)*(lvlScale*1.50);
	Disruptorbuy[client] = SquareRoot(RealStartMoney*1.50)*Pow(0.23,2.4)*(lvlScale*1.50);
	if (lvlScale == 1.0)
	{
		if (!IsMvM())
		{
			regenbuy[client] *= Pow(0.1, 0.5);
			healthbuy[client] *= 1.4;
			resistbuy[client] *= 0.5;
		}
		if (IsMvM())
		{
			regenbuy[client] *= Pow(0.1, 0.1);
			healthbuy[client] *= 0.6;
			resistbuy[client] *= 0.2;
			damagebuy[client] *= 0.7
			damagebuy2[client] *= 0.5
		}
	}
	if (lvlScale == 2.0)
	{
		healthbuy[client] *= 1.9;
		resistbuy[client] *= 1.7;
		damagebuy[client] *= 0.5;
		damagebuy2[client] *= 0.5;
		regenbuy[client] *= 0.6;
	}
	if (lvlScale == 5.0)
	{
		healthbuy[client] *= 2.3;
		resistbuy[client] *= 2.5;
		damagebuy[client] *= 0.3;
		damagebuy2[client] *= 0.3;
	}
	if (lvlScale > 5.0)
	{
		resistbuy[client] *= 5.0;
		healthbuy[client] *= 3.5;
		damagebuy[client] *= 0.7;
		damagebuy2[client] *= 0.7;
	}
	if (Blastbuy[client] > 2.0)
	{
		Blastbuy[client] = 2.0;
	}
	if (afterburnbuy[client] > 6.0)
	{
		afterburnbuy[client] = 6.0;
	}
	if (timeburnbuy[client] > 5.0)
	{
		timeburnbuy[client] = 5.0;
	}
	if (projbuy[client] > 2.0)
	{
		projbuy[client] = 2.0;
	}
	if (Sentrybuy3[client] > 5.0)
	{
		Sentrybuy3[client] = 5.0;
	}
}

public Action:BotCalc(Handle:timer)
{
	for (new client = 1; client < MaxClients + 1; client++)
	{
		if (IsValidClient(client))
		{
			if (IsFakeClient(client))
			{
				BotCalcs(client);
			}
		}
	}
}

public Action:BotTimer(Handle:timer)
{
	for (new client = 1; client < MaxClients + 1; client++)
	{
		if (IsValidClient(client))
		{
			new Float:Scaleactive = GetConVarFloat(cvar_Botlevel);
			if (IsValidClient(client) && Scaleactive >= 1.0)
			{
				if (IsFakeClient(client))
				{
					new Melee=GetPlayerWeaponSlot(client,2);
					new Second=GetPlayerWeaponSlot(client,1);
					new Primary=GetPlayerWeaponSlot(client,0);
					new BotWeapon = GetEntPropEnt(client, Prop_Send, "m_hActiveWeapon");
					if (lvlScale == 5.0)
					{
						TF2Attrib_SetByName(client, "tmp dmgbuff on hit", 40.0);
					}
					if (lvlScale > 5.0)
					{
						TF2Attrib_SetByName(client, "tmp dmgbuff on hit", 40.0);
					}
					if (IsFakeClient(client))
					{
						TF2Attrib_SetByName(client, "max health additive penalty", (healthbuy[client]*0.70));
						TF2Attrib_SetByName(client, "Blast radius increased", Blastbuy[client]);
						TF2Attrib_SetByName(client, "Projectile speed decreased", projbuy[client]);
						TF2Attrib_SetByName(client, "rocket jump damage reduction", 0.01);
						TF2Attrib_SetByName(client, "damage force reduction", 0.00);
						TF2Attrib_SetByName(client, "rocket jump damage reduction", 0.0);
						//TF2Attrib_SetByName(client, "dmg taken from fire reduced", 0.50);
						TF2Attrib_SetByName(client, "tmp dmgbuff on hit", 20.0);
						TF2Attrib_SetByName(client, "referenced item id low", 1.00);
						TF2Attrib_SetByName(client, "maxammo metal increased", 25.00);
						TF2Attrib_SetByName(client, "metal regen", 2500.0);
						if (!IsMvM())
						{
							TF2Attrib_SetByName(client, "disguise on backstab", (regenbuy[client]*0.30));
							//TF2Attrib_SetByName(i, "dmg taken from crit reduced", 0.50);
							TF2Attrib_SetByName(client, "obsolete ammo penalty", ((resistbuy[client]*3.50)+1200.0));
						}
						if (IsMvM())
						{
							TF2Attrib_SetByName(client, "disguise on backstab", (regenbuy[client]*0.05));
							TF2Attrib_SetByName(client, "obsolete ammo penalty", ((resistbuy[client]*3.50)+400.0));
						}
						TF2Attrib_SetByName(client, "weapon burn dmg increased", timeburnbuy[client]);
						TF2Attrib_SetByName(client, "clip size bonus", timeburnbuy[client]);
						TF2Attrib_SetByName(client, "referenced item id low", 0.03);
						if (RealStartMoney > 150000.0)
						{
							TF2Attrib_SetByName(client, "move speed bonus", 2.20);
							TF2Attrib_SetByName(client, "cannot be backstabbed", 1.00);
						}
						if (IsValidEntity(BotWeapon))
						{
							UU_ApplyWepDmgAttrib(BotWeapon, damagebuy[client], damagebuy2[client]);
							TF2Attrib_SetByName(client, "damage bonus", 2.80);
						}
						if (IsValidEntity(Primary))
						{
							TF2Attrib_SetByName(Primary, "weapon burn dmg increased", afterburnbuy[client]);
							TF2Attrib_SetByName(Primary, "accuracy scales damage", timeburnbuy[client]);
							TF2Attrib_SetByName(client, "fire rate bonus", 0.35);
							TF2Attrib_SetByName(client, "Reload time decreased", 0.10);
							TF2Attrib_SetByName(Primary, "flame_speed", 8000.0);
							TF2Attrib_SetByName(client, "is_operation_pass", 0.30);
							if (RealStartMoney > 150000.0)
							{
								TF2Attrib_SetByName(Primary, "item_meter_charge_rate", 0.15);
							}
							if (lvlScale > 5.0)
							{
								TF2Attrib_SetByName(Primary, "referenced item id low", Disruptorbuy[client]);
								//TF2Attrib_SetByName(Primary, "item in slot 4", 12.0);
								TF2Attrib_SetByName(Primary, "Set DamageType Ignite", 1.0);
							}
						}
						if (IsValidEntity(Second))
						{
							TF2Attrib_SetByName(Second, "weapon burn dmg increased", afterburnbuy[client]);
							TF2Attrib_SetByName(Second, "accuracy scales damage", timeburnbuy[client]);
							TF2Attrib_SetByName(client, "fire rate bonus", 0.35);
							TF2Attrib_SetByName(client, "Reload time decreased", 0.10);
							TF2Attrib_SetByName(client, "is_operation_pass", 0.30);
							if (lvlScale > 5.0)
							{
								TF2Attrib_SetByName(Second, "referenced item id low", Disruptorbuy[client]);
								//TF2Attrib_SetByName(Second, "item in slot 4", 12.0);
								TF2Attrib_SetByName(Second, "Set DamageType Ignite", 1.0);
							}
						}
						if (IsValidEntity(Melee))
						{
							TF2Attrib_SetByName(Melee, "add cloak on hit", (Sentrybuy1[client]*0.1));
							TF2Attrib_SetByName(Melee, "flame_up_speed", (Sentrybuy2[client]*0.1));
							TF2Attrib_SetByName(Melee, "weapon burn dmg increased", afterburnbuy[client]);
							TF2Attrib_SetByName(Melee, "engy building health bonus", buildinghealthbuy[client]);
							TF2Attrib_SetByName(Melee, "Construction rate increased", 4.00);
							TF2Attrib_SetByName(Melee, "Projectile speed decreased", (regenbuy[client]*0.20));
							TF2Attrib_SetByName(Melee, "engy sentry fire rate increased", 0.50);
							TF2Attrib_SetByName(client, "fire rate bonus", 0.30);
							TF2Attrib_SetByName(client, "is_operation_pass", 0.30);
							if (RealStartMoney > 150000.0)
							{
								TF2Attrib_SetByName(Melee, "flame_drag", Sentrybuy3[client]);
							}
							if (lvlScale > 5.0)
							{
								TF2Attrib_SetByName(Melee, "engy sentry fire rate increased", 0.15);
								TF2Attrib_SetByName(Melee, "referenced item id low", Disruptorbuy[client]);
							}
						}
					}
				}
			}
		}
	}
	return Plugin_Continue;
}

stock UU_ApplyWepDmgAttrib(c_weapon, Float:dmgbonus1 = 1.0, Float:dmgmult = 1.0)
{
	if (IsValidEntity(c_weapon))
	{
		new String:classname[128]; 
		GetEdictClassname(c_weapon, classname, sizeof(classname));
	
		if (strcmp(BulletWeapons, classname))
		{
			TF2Attrib_SetByName(c_weapon, "cannot giftwrap", dmgbonus1);
			TF2Attrib_SetByName(c_weapon, "tool needs giftwrap", dmgmult);
		}
		if (strcmp(ExplosiveWeapons, classname))
		{
			TF2Attrib_SetByName(c_weapon, "custom_paintkit_seed_lo", dmgbonus1);
			TF2Attrib_SetByName(c_weapon, "custom_paintkit_seed_hi", dmgmult);
		}
		if (strcmp(FlameThrowers, classname))
		{
			TF2Attrib_SetByName(c_weapon, "random drop line item 0", dmgbonus1);
			TF2Attrib_SetByName(c_weapon, "random drop line item 1", dmgmult);
		}
		if (strcmp(Flareguns, classname))
		{
			TF2Attrib_SetByName(c_weapon, "random drop line item 2", dmgbonus1);
			TF2Attrib_SetByName(c_weapon, "random drop line item 3", dmgmult);
		}
		if (strcmp(MeleeWeapons, classname))
		{
			TF2Attrib_SetByName(c_weapon, "custom texture hi", dmgbonus1);
			TF2Attrib_SetByName(c_weapon, "cannot_transmute", dmgmult);
		}
		if (strcmp(SpecialWeapons, classname))
		{
			TF2Attrib_SetByName(c_weapon, "tool target item", dmgbonus1);
			TF2Attrib_SetByName(c_weapon, "end drop date", dmgmult);
		}
		if (strcmp(Cleaver, classname))
		{
			TF2Attrib_SetByName(c_weapon, "tool target item", dmgbonus1);
			TF2Attrib_SetByName(c_weapon, "cannot_transmute", dmgmult);
		}
		if (strcmp(Bows, classname))
		{
			TF2Attrib_SetByName(c_weapon, "tool target item", dmgbonus1);
			TF2Attrib_SetByName(c_weapon, "tool needs giftwrap", dmgmult);
		}
		else
		{
			return;
		}
	}
	else
	{
		return;
	}
}