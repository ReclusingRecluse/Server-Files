# vim: set ts=2 sw=2 tw=99 noet ft=python:
import os

for i in SM.sdkInfo:
	sdk = SM.sdkInfo[i]
	if AMBuild.target['platform'] not in sdk['platform']:
		continue

	compiler = SM.DefaultHL2Compiler('extension', i)

	compiler['CXXINCLUDES'].append(os.path.join(AMBuild.sourceFolder, 'extension'))
	compiler['CXXINCLUDES'].append(os.path.join(AMBuild.sourceFolder, 'extension', 'sdk'))

	compiler['CXXINCLUDES'].append(os.path.join(AMBuild.cache['SOURCEMOD16'], 'public'))
	compiler['CXXINCLUDES'].append(os.path.join(AMBuild.cache['SOURCEMOD16'], 'public', 'sourcepawn'))

	compiler['CXXINCLUDES'].append(os.path.join(AMBuild.sourceFolder, 'open-steamworks', 'Open Steamworks'))

	if compiler.cc.name == 'gcc':
		compiler['CFLAGS'].append('-Wno-parentheses')

	if i != 'ep1':
		compiler['CDEFINES'].append('HOOKING_ENABLED')

	name = 'steamtools.ext.' + sdk['ext']
	extension = AMBuild.AddJob(name)
	binary = Cpp.LibraryBuilder(name, AMBuild, extension, compiler)
	SM.PreSetupHL2Job(extension, binary, i)

	binary.AddSourceFiles('extension', [
		'extension.cpp',
		'sdk/smsdk_ext.cpp',
		'asm/asm.c',
		'CDetour/detours.cpp',
	])

	SM.PostSetupHL2Job(extension, binary, i)
	SM.AutoVersion('extension', binary)
	SM.ExtractDebugInfo(extension, binary)
	binary.SendToJob()
